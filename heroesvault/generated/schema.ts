// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ExampleEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("previousOwner", Value.fromBytes(Bytes.empty()));
    this.set("newOwner", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExampleEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ExampleEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ExampleEntity", id.toString(), this);
    }
  }

  static load(id: string): ExampleEntity | null {
    return changetype<ExampleEntity | null>(store.get("ExampleEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get previousOwner(): Bytes {
    let value = this.get("previousOwner");
    return value!.toBytes();
  }

  set previousOwner(value: Bytes) {
    this.set("previousOwner", Value.fromBytes(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    return value!.toBytes();
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }
}

export class Record extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("user", Value.fromBytes(Bytes.empty()));
    this.set("hroId", Value.fromBigInt(BigInt.zero()));
    this.set("honAmount", Value.fromBigInt(BigInt.zero()));
    this.set("workerAmount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Record entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Record entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Record", id.toString(), this);
    }
  }

  static load(id: string): Record | null {
    return changetype<Record | null>(store.get("Record", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value!.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get hroId(): BigInt {
    let value = this.get("hroId");
    return value!.toBigInt();
  }

  set hroId(value: BigInt) {
    this.set("hroId", Value.fromBigInt(value));
  }

  get honAmount(): BigInt {
    let value = this.get("honAmount");
    return value!.toBigInt();
  }

  set honAmount(value: BigInt) {
    this.set("honAmount", Value.fromBigInt(value));
  }

  get workerAmount(): BigInt {
    let value = this.get("workerAmount");
    return value!.toBigInt();
  }

  set workerAmount(value: BigInt) {
    this.set("workerAmount", Value.fromBigInt(value));
  }
}

export class RecordTotal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("hroAmount", Value.fromBigInt(BigInt.zero()));
    this.set("honAmount", Value.fromBigInt(BigInt.zero()));
    this.set("workerAmount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RecordTotal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save RecordTotal entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("RecordTotal", id.toString(), this);
    }
  }

  static load(id: string): RecordTotal | null {
    return changetype<RecordTotal | null>(store.get("RecordTotal", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hroAmount(): BigInt {
    let value = this.get("hroAmount");
    return value!.toBigInt();
  }

  set hroAmount(value: BigInt) {
    this.set("hroAmount", Value.fromBigInt(value));
  }

  get honAmount(): BigInt {
    let value = this.get("honAmount");
    return value!.toBigInt();
  }

  set honAmount(value: BigInt) {
    this.set("honAmount", Value.fromBigInt(value));
  }

  get workerAmount(): BigInt {
    let value = this.get("workerAmount");
    return value!.toBigInt();
  }

  set workerAmount(value: BigInt) {
    this.set("workerAmount", Value.fromBigInt(value));
  }
}
