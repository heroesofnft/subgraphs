// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Stake extends ethereum.Event {
  get params(): Stake__Params {
    return new Stake__Params(this);
  }
}

export class Stake__Params {
  _event: Stake;

  constructor(event: Stake) {
    this._event = event;
  }

  get staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tier(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get honAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get hroId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get workerAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Unstake extends ethereum.Event {
  get params(): Unstake__Params {
    return new Unstake__Params(this);
  }
}

export class Unstake__Params {
  _event: Unstake;

  constructor(event: Unstake) {
    this._event = event;
  }

  get staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get hroId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class HeroesVault__recordsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class HeroesVault__tiersResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class HeroesVault extends ethereum.SmartContract {
  static bind(address: Address): HeroesVault {
    return new HeroesVault("HeroesVault", address);
  }

  feeAddress(): Address {
    let result = super.call("feeAddress", "feeAddress():(address)", []);

    return result[0].toAddress();
  }

  try_feeAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeAddress", "feeAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  feePerMillion(): BigInt {
    let result = super.call("feePerMillion", "feePerMillion():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feePerMillion(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "feePerMillion",
      "feePerMillion():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  honToken(): Address {
    let result = super.call("honToken", "honToken():(address)", []);

    return result[0].toAddress();
  }

  try_honToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("honToken", "honToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hroToken(): Address {
    let result = super.call("hroToken", "hroToken():(address)", []);

    return result[0].toAddress();
  }

  try_hroToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("hroToken", "hroToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  onERC721Received(
    operator: Address,
    from: Address,
    tokenId: BigInt,
    data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    operator: Address,
    from: Address,
    tokenId: BigInt,
    data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  recordCounts(param0: Address): BigInt {
    let result = super.call("recordCounts", "recordCounts(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_recordCounts(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "recordCounts",
      "recordCounts(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  records(param0: Address, param1: BigInt): HeroesVault__recordsResult {
    let result = super.call(
      "records",
      "records(address,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new HeroesVault__recordsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_records(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<HeroesVault__recordsResult> {
    let result = super.tryCall(
      "records",
      "records(address,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new HeroesVault__recordsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  tiers(param0: BigInt): HeroesVault__tiersResult {
    let result = super.call(
      "tiers",
      "tiers(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new HeroesVault__tiersResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_tiers(param0: BigInt): ethereum.CallResult<HeroesVault__tiersResult> {
    let result = super.tryCall(
      "tiers",
      "tiers(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new HeroesVault__tiersResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  workerToken(): Address {
    let result = super.call("workerToken", "workerToken():(address)", []);

    return result[0].toAddress();
  }

  try_workerToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("workerToken", "workerToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _hroToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _workerToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _honToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _feeAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get honAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get hroId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tier(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnstakeCall extends ethereum.Call {
  get inputs(): UnstakeCall__Inputs {
    return new UnstakeCall__Inputs(this);
  }

  get outputs(): UnstakeCall__Outputs {
    return new UnstakeCall__Outputs(this);
  }
}

export class UnstakeCall__Inputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get hroId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnstakeCall__Outputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }
}

export class UpdateFeeAddressCall extends ethereum.Call {
  get inputs(): UpdateFeeAddressCall__Inputs {
    return new UpdateFeeAddressCall__Inputs(this);
  }

  get outputs(): UpdateFeeAddressCall__Outputs {
    return new UpdateFeeAddressCall__Outputs(this);
  }
}

export class UpdateFeeAddressCall__Inputs {
  _call: UpdateFeeAddressCall;

  constructor(call: UpdateFeeAddressCall) {
    this._call = call;
  }

  get _feeAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateFeeAddressCall__Outputs {
  _call: UpdateFeeAddressCall;

  constructor(call: UpdateFeeAddressCall) {
    this._call = call;
  }
}

export class UpdateFeePerMillionCall extends ethereum.Call {
  get inputs(): UpdateFeePerMillionCall__Inputs {
    return new UpdateFeePerMillionCall__Inputs(this);
  }

  get outputs(): UpdateFeePerMillionCall__Outputs {
    return new UpdateFeePerMillionCall__Outputs(this);
  }
}

export class UpdateFeePerMillionCall__Inputs {
  _call: UpdateFeePerMillionCall;

  constructor(call: UpdateFeePerMillionCall) {
    this._call = call;
  }

  get _feePerMillion(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateFeePerMillionCall__Outputs {
  _call: UpdateFeePerMillionCall;

  constructor(call: UpdateFeePerMillionCall) {
    this._call = call;
  }
}

export class UpdateHonTokenCall extends ethereum.Call {
  get inputs(): UpdateHonTokenCall__Inputs {
    return new UpdateHonTokenCall__Inputs(this);
  }

  get outputs(): UpdateHonTokenCall__Outputs {
    return new UpdateHonTokenCall__Outputs(this);
  }
}

export class UpdateHonTokenCall__Inputs {
  _call: UpdateHonTokenCall;

  constructor(call: UpdateHonTokenCall) {
    this._call = call;
  }

  get _honToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateHonTokenCall__Outputs {
  _call: UpdateHonTokenCall;

  constructor(call: UpdateHonTokenCall) {
    this._call = call;
  }
}

export class UpdateHroTokenCall extends ethereum.Call {
  get inputs(): UpdateHroTokenCall__Inputs {
    return new UpdateHroTokenCall__Inputs(this);
  }

  get outputs(): UpdateHroTokenCall__Outputs {
    return new UpdateHroTokenCall__Outputs(this);
  }
}

export class UpdateHroTokenCall__Inputs {
  _call: UpdateHroTokenCall;

  constructor(call: UpdateHroTokenCall) {
    this._call = call;
  }

  get _hroToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateHroTokenCall__Outputs {
  _call: UpdateHroTokenCall;

  constructor(call: UpdateHroTokenCall) {
    this._call = call;
  }
}

export class UpdateTierCall extends ethereum.Call {
  get inputs(): UpdateTierCall__Inputs {
    return new UpdateTierCall__Inputs(this);
  }

  get outputs(): UpdateTierCall__Outputs {
    return new UpdateTierCall__Outputs(this);
  }
}

export class UpdateTierCall__Inputs {
  _call: UpdateTierCall;

  constructor(call: UpdateTierCall) {
    this._call = call;
  }

  get _tier(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _hroRarity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _honAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _workerAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class UpdateTierCall__Outputs {
  _call: UpdateTierCall;

  constructor(call: UpdateTierCall) {
    this._call = call;
  }
}

export class UpdateWorkerTokenCall extends ethereum.Call {
  get inputs(): UpdateWorkerTokenCall__Inputs {
    return new UpdateWorkerTokenCall__Inputs(this);
  }

  get outputs(): UpdateWorkerTokenCall__Outputs {
    return new UpdateWorkerTokenCall__Outputs(this);
  }
}

export class UpdateWorkerTokenCall__Inputs {
  _call: UpdateWorkerTokenCall;

  constructor(call: UpdateWorkerTokenCall) {
    this._call = call;
  }

  get _workerToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateWorkerTokenCall__Outputs {
  _call: UpdateWorkerTokenCall;

  constructor(call: UpdateWorkerTokenCall) {
    this._call = call;
  }
}
